import re
import os
import math

word_re = re.compile("\W?(\w+)\W?")

def get_all_files(myDirectory):
    allFiles = []
    for root, dirs, files in os.walk(myDirectory):
        for iFile in files:
            allFiles.append(root+"/"+iFile)
    return allFiles

def load_file_tokens(filepath):
    myFile = open(filepath,"r")
    allTokens = []
    for line in myFile:
        allTokens.extend([myToken.lower() for myToken in word_re.findall(line)])
    myFile.close()
    return allTokens

def load_collection_tokens(myDirectory):
    filePathList = get_all_files(myDirectory)
    allTokens = []
    for myFilePath in fileList:
        allTokens.extend(load_file_tokens(myFilePath))
    return allTokens

def get_flatlist(itemlist):
    return [item for source, sourceitems in itemlist for item in sourceitems]

def get_types(flatlist):
    return tuple(sorted(list[set(flatlist)]))

def get_tf(flatlist):
    #Remember, itemlist is a set of tuples identifying
    # first the source, then a list of items from that
    # source
    types = get_types(flatlist)
    histogram = [0]*len(types)
    for iii, iType in enumerate(types):
        histogram[iii] = flatlist.count(iType)
    normFac = 1.0/max(histogram)
    tfDict = {}
    for iii, iType in enumerate(types):
        tfDict[iType] = histogram[iii]*normFac
    return tfDict

def get_idf(itemlist):
    flatlist = get_flatlist(itemlist)
    types = get_types(flatlist)
    idf = {}
    NDoc = len(itemlist)
    for iii, iType in enumerate(types):
        count = 0
        for docList in itemlist:
            if iType in docList[1]:
                count += 1
        idf[iType] = math.log((1.0*NDoc)/count)
    return idf


    
